import discord # Import the discord.py module for accessing the Discord API
from discord.ext import commands # Import commands from the discord.ext (Discord extensions) module, which allows us to create bot commnds
import logging # Import logging which allows us to log messages
from dotenv import load_dotenv # dotenv (from python-dotenv) allows us to load variables from .env files
import os # Import os for handling os-dependent functions
import commands as cmds # Use functions from commands.py

load_dotenv() # Get environment variables from a .env file (which contains the bot token)
TOKEN = os.getenv("TOKEN") # Inside .env, the enviroment variable for the token is named TOKEN, so we get that value and assign it to the TOKEN varable

"""
The logging module has a FileHandler class for writing logs to files.
The file to be written to is discord.log, which is created automatically if it doesn't already exist.
utf-8 is the character encoding to be used when the file handler writes to the file.
mode="w" gives the file handler permission to write to the file.

(.log files are files that store messages generated by software, operating systems, or hardware.)
"""
handler = logging.FileHandler(filename="discord.log", encoding="utf-8", mode="w")

"""
Intents are Discord's way of taking events.
Discord bots rely on events to take action, and intents tell us which events the bot should be able to access.
"""
intents = discord.Intents.default() # Default set of intents
intents.message_content = True # Enable the message_content intent to read messages

bot = commands.Bot(command_prefix="/", intents=intents) # Initialize the bot which can be called upon with slash commands, and with the intents we defined earlier

"""
Event decorators are wrappers for functions.
An event decorator is a function, and the function defined within its bounds is passed to it.
Event decorators are used for anything that requires code being executed before and after a function.
"""
@bot.event # Event decorator that passes the following function to a discord.py function
async def on_ready(): # Function for when the bot is fully initialized (async because it use the Discord API)
    print(f"{bot.user.name} up and running!") # Print the bot's username
    await bot.tree.sync() # Sync all commands with the bot tree

@bot.event 
async def on_message(message): # Function for tracking messages, which takes the message as an argument
    if message.author == bot.user: return # If the author of the message is the bot itself, end the function so the bot doesn't reply to itself
    await bot.process_commands(message) # Retrigger command processing for the bot

# Create a new command in the bot tree named fun_fact with a description
@bot.tree.command(name="fun_fact", description="Get a randomly generated fun fact!")
async def fun_fact(ctx): # Function to retrieve a fun fact using get_fact() in fun_fact.py
    await ctx.response.send_message(cmds.get_fact()) # Reply to the sender with the fun fact generated by fun_fact() in commands.py

"""
Run the bot using its token,
handling logs using the log handler,
and logs debug information
(remember that everything will be inside discord.log)
"""
bot.run(TOKEN, log_handler=handler, log_level=logging.ERROR)